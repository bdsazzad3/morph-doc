"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[6736],{63:(n,o,s)=>{s.r(o),s.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>e,metadata:()=>c,toc:()=>d});var r=s(3274),t=s(2333);const e={},i="Function: toTransactionHash()",c={id:"build-on-morph/sdk/functions/toTransactionHash",title:"toTransactionHash",description:"[@morph-l2/sdk] \u2022 Docs",source:"@site/docs/build-on-morph/sdk/functions/toTransactionHash.md",sourceDirName:"build-on-morph/sdk/functions",slug:"/build-on-morph/sdk/functions/toTransactionHash",permalink:"/docs/build-on-morph/sdk/functions/toTransactionHash",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/sdk/functions/toTransactionHash.md",tags:[],version:"current",frontMatter:{},sidebar:"DevSidebar",previous:{title:"toSignerOrProvider",permalink:"/docs/build-on-morph/sdk/functions/toSignerOrProvider"},next:{title:"BridgeAdapterData",permalink:"/docs/build-on-morph/sdk/interfaces/BridgeAdapterData"}},a={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Source",id:"source",level:2}];function h(n){const o={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["[",(0,r.jsx)(o.strong,{children:"@morph-l2/sdk"}),"] \u2022 ",(0,r.jsx)(o.strong,{children:"Docs"})]}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.a,{href:"/docs/build-on-morph/sdk/globals",children:"@morph-l2/sdk"})," / toTransactionHash"]}),"\n",(0,r.jsx)(o.h1,{id:"function-totransactionhash",children:"Function: toTransactionHash()"}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"toTransactionHash"}),"(",(0,r.jsx)(o.code,{children:"transaction"}),"): ",(0,r.jsx)(o.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:"Pulls a transaction hash out of a TransactionLike object."}),"\n",(0,r.jsx)(o.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(o.p,{children:["\u2022 ",(0,r.jsx)(o.strong,{children:"transaction"}),": ",(0,r.jsx)(o.a,{href:"/docs/build-on-morph/sdk/type-aliases/TransactionLike",children:(0,r.jsx)(o.code,{children:"TransactionLike"})})]}),"\n",(0,r.jsx)(o.p,{children:"TransactionLike to convert into a transaction hash."}),"\n",(0,r.jsx)(o.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.code,{children:"string"})}),"\n",(0,r.jsx)(o.p,{children:"Transaction hash corresponding to the TransactionLike input."}),"\n",(0,r.jsx)(o.h2,{id:"source",children:"Source"}),"\n",(0,r.jsx)(o.p,{children:"src/utils/coercion.ts:62"})]})}function l(n={}){const{wrapper:o}={...(0,t.R)(),...n.components};return o?(0,r.jsx)(o,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},2333:(n,o,s)=>{s.d(o,{R:()=>i,x:()=>c});var r=s(9474);const t={},e=r.createContext(t);function i(n){const o=r.useContext(e);return r.useMemo((function(){return"function"==typeof n?n(o):{...o,...n}}),[o,n])}function c(n){let o;return o=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(e.Provider,{value:o},n.children)}}}]);