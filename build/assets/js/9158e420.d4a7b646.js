"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[9003],{4430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(3274),r=t(2333);const a={title:"How to Run a Morph Validator Node",lang:"en-US"},s=void 0,i={id:"build-on-morph/developer-resources/how-to-run-a-validator-node",title:"How to Run a Morph Validator Node",description:"Run a Morph Node",source:"@site/docs/build-on-morph/developer-resources/5-how-to-run-a-validator-node.md",sourceDirName:"build-on-morph/developer-resources",slug:"/build-on-morph/developer-resources/how-to-run-a-validator-node",permalink:"/docs/build-on-morph/developer-resources/how-to-run-a-validator-node",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/5-how-to-run-a-validator-node.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"How to Run a Morph Validator Node",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"How to Run a Morph Node",permalink:"/docs/build-on-morph/developer-resources/how-to-run-a-morph-node"},next:{title:"Create a Safe Multi-Signature Wallet",permalink:"/docs/build-on-morph/developer-resources/create-a-safe-multi-signature-wallet"}},d={},l=[{value:"Run a Morph Node",id:"run-a-morph-node",level:2},{value:"Build executable binary",id:"build-executable-binary",level:2},{value:"Build Geth",id:"build-geth",level:3},{value:"Build Node",id:"build-node",level:3},{value:"Config Preparation",id:"config-preparation",level:2},{value:"Script to start the process",id:"script-to-start-the-process",level:2},{value:"Geth",id:"geth",level:3},{value:"Node",id:"node",level:3},{value:"Check Status",id:"check-status",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"run-a-morph-node",children:"Run a Morph Node"}),"\n",(0,o.jsxs)(n.p,{children:["This guide describes the approach to starting up a morph validator node. If you haven't familiar with the validator duty, please refer to our ",(0,o.jsx)(n.a,{href:"/docs/how-morph-works/responsive-validity-proof/overview",children:"optimistic zkEVM design"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["We create the folder ",(0,o.jsx)(n.code,{children:"~/.morph"})," as our home directory for the following example."]}),"\n",(0,o.jsx)(n.h2,{id:"build-executable-binary",children:"Build executable binary"}),"\n",(0,o.jsx)(n.h3,{id:"build-geth",children:"Build Geth"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Clone go-ethereum"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/.morph \ncd ~/.morph\ngit clone https://github.com/morph-l2/go-ethereum.git\n"})}),"\n",(0,o.jsx)(n.p,{children:"Currently, we use tag   v0.2.1-beta as our beta version geth."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd go-ethereum\ngit checkout v0.2.1-beta\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Build geth"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"make nccc_geth\n"})}),"\n",(0,o.jsx)(n.h3,{id:"build-node",children:"Build Node"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Clone node"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\ngit clone https://github.com/morph-l2/node.git\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Build node"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd node\ngit checkout v0.2.1-beta\nmake build\n"})}),"\n",(0,o.jsx)(n.h2,{id:"config-preparation",children:"Config Preparation"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Download the config files and make data dir"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\nwget https://raw.githubusercontent.com/morph-l2/config-template/main/sepolia-beta/data.zip\nunzip data.zip\n"})}),"\n",(0,o.jsx)(n.p,{children:"geth-data and node-data will be produced under the ~/.morph like the below"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"\u251c\u2500\u2500 geth-data\n\u2502\xa0\xa0 \u251c\u2500\u2500 genesis.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 static-nodes.json\n\u2514\u2500\u2500 node-data\n    \u251c\u2500\u2500 config\n    \u2502\xa0\xa0 \u251c\u2500\u2500 config.toml\n    \u2502\xa0\xa0 \u2514\u2500\u2500 genesis.json\n    \u2514\u2500\u2500 data\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Create a shared secret with node"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\nopenssl rand -hex 32 > jwt-secret.txt\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Write geth genesis state locally"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\n./go-ethereum/build/bin/geth --verbosity=3 init --datadir=~/.morph/geth-data ~/.morph/geth-data/genesis.json\n"})}),"\n",(0,o.jsx)(n.h2,{id:"script-to-start-the-process",children:"Script to start the process"}),"\n",(0,o.jsx)(n.h3,{id:"geth",children:"Geth"}),"\n",(0,o.jsx)(n.p,{children:"This is the script for alpha testnet.  Execute the shell script to start the geth process"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'#! /usr/bin/bash\ncd ~/.morph\n\nNETWORK_ID=2710\n\nnohup ./go-ethereum/build/bin/geth \\\n--datadir=./geth-data \\\n--verbosity=3 \\\n--http \\\n--http.corsdomain="*" \\\n--http.vhosts="*" \\\n--http.addr=0.0.0.0 \\\n--http.port=8545 \\\n--http.api=web3,eth,txpool,net,engine \\\n--ws \\\n--ws.addr=0.0.0.0 \\\n--ws.port=8546 \\\n--ws.origins="*" \\\n--ws.api=web3,eth,txpool,net,engine \\\n--networkid=$NETWORK_ID \\\n--authrpc.addr="0.0.0.0" \\\n--authrpc.port="8551" \\\n--authrpc.vhosts="*" \\\n--authrpc.jwtsecret=$JWT_SECRET_PATH \\\n--gcmode=archive \\\n--metrics \\\n--metrics.addr=0.0.0.0 \\\n--metrics.port=6060 \\\n--miner.gasprice="100000000" \n'})}),"\n",(0,o.jsx)(n.h3,{id:"node",children:"Node"}),"\n",(0,o.jsx)(n.p,{children:"This is the script to start the node process"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'#! /usr/bin/bash\ncd ~/.morph\n\nNODE_DATA_DIR="./node-data"\nexport MORPH_NODE_L2_ENGINE_AUTH="./jwt-secret.txt"\nexport MORPH_NODE_L2_ETH_RPC="http://127.0.0.1:8545"\nexport MORPH_NODE_L2_ENGINE_RPC="http://127.0.0.1:8551"\nexport MORPH_NODE_L1_ETH_RPC=$(Ethereum Holesky RPC)\nexport MORPH_NODE_VALIDATOR_PRIVATE_KEY=$(Your Validator Key)\nexport MORPH_NODE_ROLLUP_ADDRESS=0xd8c5c541d56f59d65cf775de928ccf4a47d4985c\nexport MORPH_NODE_DERIVATION_START_HEIGHT=1434640\nexport MORPH_NODE_SYNC_START_HEIGHT=1434640\nexport MORPH_NODE_DERIVATION_FETCH_BLOCK_RANGE=1000\nexport MORPH_NODE_VALIDATOR=true\nexport MORPH_NODE_MOCK_SEQUENCER=false\n\nnohup ./node/build/bin/morphnode --validator --home $NODE_DATA_DIR > node.log 2>&1 &\n'})}),"\n",(0,o.jsx)(n.h2,{id:"check-status",children:"Check Status"}),"\n",(0,o.jsx)(n.p,{children:"If your node is successfully started, you will see the following response:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'I[2024-06-06|15:57:35.216] metrics server enabled                       module=derivation host=0.0.0.0 port=26660\nderivation node starting\nID> 24-06-06|15:57:35.216] initial sync start                           module=syncer msg="Running initial sync of L1 messages before starting sequencer, this might take a while..."\nI[2024-06-06|15:57:35.242] initial sync completed                       module=syncer latestSyncedBlock=1681622\nI[2024-06-06|15:57:35.242] derivation start pull rollupData form l1     module=derivation startBlock=1681599 end=1681622\nI[2024-06-06|15:57:35.244] fetched rollup tx                            module=derivation txNum=8 latestBatchIndex=59201\nI[2024-06-06|15:57:35.315] fetch rollup transaction success             module=derivation txNonce=8764 txHash=0x5fb8a98472d1be73be2bc6be0807b9e0c68b7ba14a648c8a17bdaff7b26eb923 l1BlockNumber=1681599 firstL2BlockNumber=1347115 lastL2BlockNumber=1347129\nI[2024-06-06|15:57:35.669] new l2 block success                         module=derivation blockNumber=1347115\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can use the following command to check the newest block height to make sure you are aligned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'localhost:8545/\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n   "jsonrpc":"2.0",\n   "method":"eth_blockNumber",\n   "id":1\n}\'\n{"jsonrpc":"2.0","id":1,"result":"0x148e39"}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Make sure you check the validator status constantly, if you find response"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[2024-06-14|16:43:50.904] root hash or withdrawal hash is not equal    originStateRootHash=0x13f91d1c272e48e2d864ce7bfb421506d5b2a04def64d45c75391cdcdd69cd78 deriveStateRootHash=0x27e10420c0e34676a7d75c4189d7ccd1c3407cc8fd0b3eafb01c15e250a1215f batchWithdrawalRoot=0xa3e4a7cf45c7591a6bd9868f1fa7485ae345f10067acaade5f5b07d418b2e172 deriveWithdrawalRoot=0xa3e4a7cf45c7591a6bd9868f1fa7485ae345f10067acaade5f5b07d418b2e172\n"})}),"\n",(0,o.jsx)(n.p,{children:"This means your validators find inconsistent between sequencer submission and your own observation."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},2333:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(9474);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);