"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[749],{2877:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var r=o(6070),t=o(1582);const d={title:"Run a validator with docker",lang:"en-US"},i=void 0,a={id:"build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",title:"Run a validator with docker",description:"This guide will help you start a validator node running in the docker container using run-morph-node",source:"@site/docs/build-on-morph/developer-resources/node-operation/validator-node/1-run-in-docker.md",sourceDirName:"build-on-morph/developer-resources/node-operation/validator-node",slug:"/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/node-operation/validator-node/1-run-in-docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Run a validator with docker",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"Run a full node from source",permalink:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-on-host"},next:{title:"Run a validator from source",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-on-host"}},s={},l=[{value:"Quick Start",id:"quick-start",level:3},{value:"Sync from snapshot",id:"sync-from-snapshot",level:3},{value:"Run a Holesky Validator Node",id:"run-a-holesky-validator-node",level:3},{value:"1. Download the Snapshot",id:"1-download-the-snapshot",level:4},{value:"2. Modify Environment Variables",id:"2-modify-environment-variables",level:4},{value:"3. Run the Validator",id:"3-run-the-validator",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This guide will help you start a validator node running in the docker container using ",(0,r.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node",children:"run-morph-node"})]}),"\n",(0,r.jsx)(n.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Clone the dockerfile repository"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/morph-l2/run-morph-node.git\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["2. Update ",(0,r.jsx)(n.code,{children:"morph-node/.env"})]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"morph-node/.env"})," file defines the environment variables required for deploying a validator node. Below is an example configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="morph-node/.env"',children:"// General settings\nMORPH_HOME=../mainnet\nMORPH_FLAG=morph\nJWT_SECRET_FILE=${MORPH_HOME}/jwt-secret.txt\nGETH_ENTRYPOINT_FILE=./entrypoint-geth.sh\nHOLESKY_SNAPSHOT_NAME=snapshot-20241029-1\n\n// Environment variables for validator node\nL1_CHAIN_ID=1\nL1_ETH_RPC=${your_layer1_execution_client_rpc_url}\nL1_BEACON_CHAIN_RPC=${your_layer1_beacon_client_rpc_url}\nL1MESSAGEQUEUE_CONTRACT=0x3931ade842f5bb8763164bdd81e5361dce6cc1ef\nROLLUP_CONTRACY=0x759894ced0e6af42c26668076ffa84d02e3cef60\nSTART_HEIGHT=20996776\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Default Directory:"})})}),"\nFor running a validator on the mainnet, the ",(0,r.jsx)(n.code,{children:"MORPH_HOME"})," directory defaults to ",(0,r.jsx)(n.code,{children:"../mainnet"}),". You can customize this path to suit your setup."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Layer1 RPC URLs:"})})}),"\nEnsure you provide the correct RPC URLs for the Layer 1 execution client (L1_ETH_RPC) and the beacon chain client (L1_BEACON_CHAIN_RPC). These URLs are essential for the validator to fetch rollup batches and maintain synchronization."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The .env file above is only used for running a validator node on the mainnet. To set up and operate a Holesky validator node, please refer to ",(0,r.jsx)(n.a,{href:"#run-a-holesky-validator-node",children:"Run a Holesky Validator Node"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Run the following command"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd morph-node\nmake run-validator\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sync-from-snapshot",children:"Sync from snapshot"}),"\n",(0,r.jsxs)(n.p,{children:["We recommend synchronizing blocks using snapshot data to reduce the time required for block synchronization. For detailed instructions on downloading and setting up snapshot data, please refer to ",(0,r.jsx)(n.a,{href:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-in-docker#sync-node-from-snapshot",children:(0,r.jsx)(n.strong,{children:"Sync node from snapshot"})}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"At the moment, we only provide a snapshot for the Holesky network. A snapshot for the mainnet will be available soon."})}),"\n",(0,r.jsx)(n.h3,{id:"run-a-holesky-validator-node",children:"Run a Holesky Validator Node"}),"\n",(0,r.jsx)(n.p,{children:"The Holesky node only allows you to sync the blocks from a snapshot. To set up and run a Holesky node using a snapshot, you need to follow these steps:"}),"\n",(0,r.jsx)(n.h4,{id:"1-download-the-snapshot",children:"1. Download the Snapshot"}),"\n",(0,r.jsxs)(n.p,{children:["To sync the node, you must first download the snapshot data. Locate the snapshot download instructions in ",(0,r.jsx)(n.a,{href:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-in-docker#sync-node-from-snapshot",children:(0,r.jsx)(n.strong,{children:"Sync node from snapshot"})}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"2-modify-environment-variables",children:"2. Modify Environment Variables"}),"\n",(0,r.jsxs)(n.p,{children:["Before running the node, update the environment variables in the ",(0,r.jsx)(n.code,{children:"morph-node/.env"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="morph-node/.env"',children:"// General settings\nMORPH_HOME=../holesky\nMORPH_FLAG=morph-holesky\nJWT_SECRET_FILE=${MORPH_HOME}/jwt-secret.txt\nGETH_ENTRYPOINT_FILE=./entrypoint-geth.sh\nHOLESKY_SNAPSHOT_NAME=snapshot-20241029-1\n\n// Environment variables for validator node\nL1_CHAIN_ID=17000\nL1_ETH_RPC=${your_layer1_execution_client_rpc_url}\nL1_BEACON_CHAIN_RPC=${your_layer1_beacon_client_rpc_url}\nL1MESSAGEQUEUE_CONTRACT=0x778d1d9a4d8b6b9ade36d967a9ac19455ec3fd0b\nROLLUP_CONTRACY=0xd8c5c541d56f59d65cf775de928ccf4a47d4985c\nSTART_HEIGHT=1434640\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-run-the-validator",children:"3. Run the Validator"}),"\n",(0,r.jsx)(n.p,{children:"With the snapshot and configuration files ready, navigate to the morph-node folder under your cloned repository, and start the node using the provided command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"make run-validator\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1582:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var r=o(758);const t={},d=r.createContext(t);function i(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);