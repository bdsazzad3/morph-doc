"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[6935],{9148:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>p});var t=n(3274),r=n(2333);const d={title:"Upgrade node running from docker",lang:"en-US"},s=void 0,a={id:"build-on-morph/developer-resources/node-operation/upgrade-node/upgrade-node-docker",title:"Upgrade node running from docker",description:"Upgrading the node is straightforward. Simply install the new version of the node executable file and replace the previous version. Then, stop the currently running node and restart it with the updated version. Node will automatically use the data of your old node and sync the latest blocks that were mined since you shut down the old software.",source:"@site/docs/build-on-morph/developer-resources/node-operation/upgrade-node/2-upgrade-node-docker.md",sourceDirName:"build-on-morph/developer-resources/node-operation/upgrade-node",slug:"/build-on-morph/developer-resources/node-operation/upgrade-node/upgrade-node-docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/upgrade-node/upgrade-node-docker",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/node-operation/upgrade-node/2-upgrade-node-docker.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Upgrade node running from docker",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"How to Run a Morph Validator Node",permalink:"/docs/build-on-morph/developer-resources/node-operation/how-to-run-a-validator-node"},next:{title:"Upgrade node running on the host",permalink:"/docs/build-on-morph/developer-resources/node-operation/upgrade-node/upgrade-node-host"}},i={},p=[{value:"Step1: Compile the new version of the code",id:"step1-compile-the-new-version-of-the-code",level:3},{value:"Step2: Stop nodes",id:"step2-stop-nodes",level:3},{value:"Step3: Restart",id:"step3-restart",level:3}];function l(e){const o={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"Upgrading the node is straightforward. Simply install the new version of the node executable file and replace the previous version. Then, stop the currently running node and restart it with the updated version. Node will automatically use the data of your old node and sync the latest blocks that were mined since you shut down the old software."}),"\n",(0,t.jsx)(o.p,{children:"Running the node requires two binary files: morphnode and geth. Choose to upgrade the binary files according to your specific needs."}),"\n",(0,t.jsx)(o.h3,{id:"step1-compile-the-new-version-of-the-code",children:"Step1: Compile the new version of the code"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"git clone https://github.com/morph-l2/morph.git\n## checkout the latest version of the source code you need\ngit checkout ${latestVersion}\n## install geth\nmake nccc_geth\n## install morphnode\ncd ./morph/node && make build\n"})}),"\n",(0,t.jsx)(o.h3,{id:"step2-stop-nodes",children:"Step2: Stop nodes"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"## stop morphnode process\npid=`ps -ef | grep morphnode | grep -v grep | awk '{print $2}'`\nkill  $pid\n\n## stop geth process\npid=`ps -ef | grep geth | grep -v grep | awk '{print $2}'`\nkill  $pid\n"})}),"\n",(0,t.jsx)(o.h3,{id:"step3-restart",children:"Step3: Restart"}),"\n",(0,t.jsx)(o.p,{children:"Make sure to use the same start-up command you used before the upgrade"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:'## start geth\n./morph/go-ethereum/build/bin/geth --morph-holesky \\\n    --datadir "./geth-data" \\\n    --http --http.api=web3,debug,eth,txpool,net,engine \\\n    --authrpc.addr localhost \\\n    --authrpc.vhosts="localhost" \\\n    --authrpc.port 8551 \\\n    --authrpc.jwtsecret=./jwt-secret.txt \\\n    --log.filename=./geth.log\n\n## start geth    \n./morph/node/build/bin/morphnode --home ./node-data \\\n     --l2.jwt-secret ./jwt-secret.txt \\\n     --l2.eth http://localhost:8545 \\\n     --l2.engine http://localhost:8551 \\\n     --log.filename ./node.log \n'})})]})}function h(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},2333:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>a});var t=n(9474);const r={},d=t.createContext(r);function s(e){const o=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:o},e.children)}}}]);